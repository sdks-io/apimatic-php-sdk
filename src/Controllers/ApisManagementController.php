<?php

declare(strict_types=1);

/*
 * ApimaticAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApimaticAPILib\Controllers;

use ApimaticAPILib\Exceptions\ApiException;
use ApimaticAPILib\Models\ApiEntity;
use ApimaticAPILib\Models\ExportFormats;
use ApimaticAPILib\Models\ImportApiVersionViaUrlRequest;
use ApimaticAPILib\Models\ImportApiViaUrlRequest;
use ApimaticAPILib\Models\InplaceImportApiViaUrlRequest;
use ApimaticAPILib\Utils\FileWrapper;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;

class ApisManagementController extends BaseController
{
    /**
     * Import an API into the APIMatic Dashboard by uploading the API specification file.
     *
     * You can also specify [API Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
     * importing the API using this endpoint. When specifying Metadata, the uploaded file will be a zip
     * file containing the API specification file and the `APIMATIC-META` json file.
     *
     * @param FileWrapper $file The API specification file.<br>The type of the specification file
     *        should be any of the [supported formats](https://docs.apimatic.io/api-
     *        transformer/overview-transformer#supported-input-formats).
     *
     * @return ApiEntity Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function importAPIViaFile(FileWrapper $file): ApiEntity
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/api-entities/import-via-file')
            ->auth('Authorization')
            ->parameters(FormParam::init('file', $file));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request'))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed'))
            ->throwErrorOn('422', ErrorType::init('Unprocessable Entity'))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error'))
            ->type(ApiEntity::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Import an API into the APIMatic Dashboard by providing the URL of the API specification file.
     *
     * You can also specify [API Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
     * importing the API using this endpoint. When specifying Metadata, the URL provided will be that of a
     * zip file containing the API specification file and the `APIMATIC-META` json file.
     *
     * @param ImportApiViaUrlRequest $body Request Body
     *
     * @return ApiEntity Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function importAPIViaURL(ImportApiViaUrlRequest $body): ApiEntity
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/api-entities/import-via-url')
            ->auth('Authorization')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/vnd.apimatic.apiEntityUrlImportDto.v1+json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request'))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed'))
            ->throwErrorOn('422', ErrorType::init('Unprocessable Entity'))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error'))
            ->type(ApiEntity::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Import a new version for an API, against an existing API Group, by uploading the API specification
     * file.
     *
     * You can also specify [API Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
     * importing the API version using this endpoint. When specifying Metadata, the uploaded file will be a
     * zip file containing the API specification file and the `APIMATIC-META` json file.
     *
     * @param string $apiGroupId The ID of the API Group for which to import a new API version.
     * @param string $versionOverride The version number with which the new API version will be
     *        imported. This version number will override the version specified in the API
     *        specification file.<br>APIMatic recommends versioning the API with the [versioning
     *        scheme](https://docs.apimatic.io/define-apis/basic-settings/#version) documented in
     *        the docs.
     * @param FileWrapper $file The API specification file.<br>The type of the specification file
     *        should be any of the [supported formats](https://docs.apimatic.io/api-
     *        transformer/overview-transformer#supported-input-formats).
     *
     * @return ApiEntity Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function importNewAPIVersionViaFile(
        string $apiGroupId,
        string $versionOverride,
        FileWrapper $file
    ): ApiEntity {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/api-groups/{api_group_id}/api-entities/import-via-file'
        )
            ->auth('Authorization')
            ->parameters(
                TemplateParam::init('api_group_id', $apiGroupId),
                FormParam::init('version_override', $versionOverride),
                FormParam::init('file', $file)
            );

        $_resHandler = $this->responseHandler()->type(ApiEntity::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Import a new version for an API, against an existing API Group, by providing the URL of the API
     * specification file.
     *
     * You can also specify [API Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
     * importing the API version using this endpoint. When specifying Metadata, the URL provided will be
     * that of a zip file containing the API specification file and the `APIMATIC-META` json file.
     *
     * @param string $apiGroupId The ID of the API Group for which to import a new API version.
     * @param ImportApiVersionViaUrlRequest $body Request Body
     *
     * @return ApiEntity Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function importNewAPIVersionViaURL(string $apiGroupId, ImportApiVersionViaUrlRequest $body): ApiEntity
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/api-groups/{api_group_id}/api-entities/import-via-url'
        )
            ->auth('Authorization')
            ->parameters(
                TemplateParam::init('api_group_id', $apiGroupId),
                HeaderParam::init('Content-Type', 'application/vnd.apimatic.apiGroupApiEntityUrlImportDto.v1+json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()->type(ApiEntity::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Replace an API version of an API Group, by uploading the API specification file that will replace
     * the current version.
     *
     * You can also specify [API Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
     * importing the API version using this endpoint. When specifying Metadata, the uploaded file will be a
     * zip file containing the API specification file and the `APIMATIC-META` json file.
     *
     * @param string $apiEntityId The ID of the API Entity to replace.
     * @param FileWrapper $file The API specification file.<br>The type of the specification file
     *        should be any of the [supported formats](https://docs.apimatic.io/api-
     *        transformer/overview-transformer#supported-input-formats).
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function inplaceAPIImportViaFile(string $apiEntityId, FileWrapper $file): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/api-entities/{api_entity_id}/import-via-file')
            ->auth('Authorization')
            ->parameters(TemplateParam::init('api_entity_id', $apiEntityId), FormParam::init('file', $file));

        $this->execute($_reqBuilder);
    }

    /**
     * Replace an API version of an API Group, by providing the URL of the API specification file that will
     * replace the current version.
     *
     * You can also specify [API Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
     * importing the API version using this endpoint. When specifying Metadata, the URL provided will be
     * that of a zip file containing the API specification file and the `APIMATIC-META` json file.
     *
     * @param string $apiEntityId The ID of the API Entity to replace.
     * @param InplaceImportApiViaUrlRequest $body Request Body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function inplaceAPIImportViaURL(string $apiEntityId, InplaceImportApiViaUrlRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/api-entities/{api_entity_id}/import-via-url')
            ->auth('Authorization')
            ->parameters(
                TemplateParam::init('api_entity_id', $apiEntityId),
                HeaderParam::init('Content-Type', 'application/vnd.apimatic.apiEntityUrlImportDto.v1+json'),
                BodyParam::init($body)
            );

        $this->execute($_reqBuilder);
    }

    /**
     * Fetch an API Entity.
     *
     * @param string $apiEntityId The ID of the API Entity to fetch.
     *
     * @return ApiEntity Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchAPIEntity(string $apiEntityId): ApiEntity
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/api-entities/{api_entity_id}')
            ->auth('Authorization')
            ->parameters(TemplateParam::init('api_entity_id', $apiEntityId));

        $_resHandler = $this->responseHandler()->type(ApiEntity::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Download the API Specification file for a an API Version in any of the API Specification formats
     * supported by APIMatic.
     *
     * @param string $apiEntityId The ID of the API Entity to download.
     * @param string $format The format in which to download the API.<br>The format can be any of
     *        the [supported formats](https://docs.apimatic.io/api-transformer/overview-
     *        transformer#supported-input-formats).
     *
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function downloadAPISpecification(string $apiEntityId, string $format): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/api-entities/{api_entity_id}/api-description')
            ->auth('Authorization')
            ->parameters(
                TemplateParam::init('api_entity_id', $apiEntityId),
                QueryParam::init('format', $format)->serializeBy([ExportFormats::class, 'checkValue'])
            );

        return $this->execute($_reqBuilder);
    }
}
