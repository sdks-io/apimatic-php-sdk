<?php

declare(strict_types=1);

/*
 * ApimaticAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApimaticAPILib\Controllers;

use ApimaticAPILib\Exceptions\ApiException;
use ApimaticAPILib\Models\ApiValidationSummary;
use ApimaticAPILib\Models\DocsValidationSummary;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;

class APIValidationImportedApisController extends BaseController
{
    /**
     * Validate an API using the [APIMatic Validator](https://docs.apimatic.io/generate-sdks/overview-
     * sdks#step-2-api-validation).
     *
     * @param string $apiEntityId The ID of the API Entity to perform validation for.
     *
     * @return ApiValidationSummary Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function validateAPI(string $apiEntityId): ApiValidationSummary
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/api-entities/{api_entity_id}/api-validation-summary'
        )->auth('Authorization')->parameters(TemplateParam::init('api_entity_id', $apiEntityId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request'))
            ->throwErrorOn('403', ErrorType::init('Forbidden'))
            ->throwErrorOn('404', ErrorType::init('API not found'))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error'))
            ->type(ApiValidationSummary::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Validate an API for documentation generation. This process validates the API for missing examples or
     * missing descriptions.
     *
     * @param string $apiEntityId The ID of the API Entity to perform validation for.
     *
     * @return DocsValidationSummary Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function validateAPIForDocs(string $apiEntityId): DocsValidationSummary
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/api-entities/{api_entity_id}/docs-validation-summary'
        )->auth('Authorization')->parameters(TemplateParam::init('api_entity_id', $apiEntityId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request'))
            ->throwErrorOn('403', ErrorType::init('Forbidden'))
            ->throwErrorOn('404', ErrorType::init('API not found'))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error'))
            ->type(DocsValidationSummary::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
