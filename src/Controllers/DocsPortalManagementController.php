<?php

declare(strict_types=1);

/*
 * ApimaticAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApimaticAPILib\Controllers;

use ApimaticAPILib\Exceptions\ApiException;
use ApimaticAPILib\Utils\FileWrapper;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;

class DocsPortalManagementController extends BaseController
{
    /**
     * Publish artifacts for a Hosted Portal.
     *
     * This endpoint regenerates all the artifacts for a hosted portal and uploads them to APIMatic's cloud
     * storage, from where the Portal fetches them. These artifacts include:
     *
     * 1. SDKs
     * 2. Docs
     * 3. API Specification files
     *
     * Call this endpoint to update your Hosted Portal after you update an API Entity via any of the Import
     * API Endpoints.
     *
     * __**Note: If you have an embedded portal against the same API Entity, artifacts for that portal will
     * get updated as well.**__
     *
     * @param string $apiEntityId The ID of the API Entity to update the portal artifacts for.
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function publishHostedPortal(string $apiEntityId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/api-entities/{api_entity_id}/hosted-portal')
            ->auth('Authorization')
            ->parameters(TemplateParam::init('api_entity_id', $apiEntityId));

        $this->execute($_reqBuilder);
    }

    /**
     * Publish artifacts for an Embedded Portal and get the Portal Embed script.
     *
     * This endpoint regenerates all the artifacts for an embedded portal and uploads them to APIMatic's
     * cloud storage, from where the Portal fetches them. These artifacts include:
     *
     * 1. SDKs
     * 2. Docs
     * 3. API Specification files
     *
     * Call this endpoint to update your Embedded Portal after you update an API Entity via any of the
     * Import API Endpoints. This endpoint returns the Portal Embed script in the response.
     *
     * __**Note: If you have a hosted portal against the same API Entity, artifacts for that portal will
     * get updated as well.**__
     *
     * @param string $apiEntityId The ID of the API Entity to update the portal artifacts for.
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function publishEmbeddedPortal(string $apiEntityId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/api-entities/{api_entity_id}/embedded-portal')
            ->auth('Authorization')
            ->parameters(TemplateParam::init('api_entity_id', $apiEntityId));

        $this->execute($_reqBuilder);
    }

    /**
     * Generate an On-premise Documentation Portal for an API Entity. This endpoint generates all artifacts
     * for the Portal and packages them together into a zip file along with the required HTML, CSS and JS
     * files. The generated artifacts include:
     *
     * 1. SDKs
     * 2. Docs
     * 3. API Specification files
     *
     * The endpoint returns a zip file that contains a static Site and can be hosted on any Web Server.
     *
     * @param string $apiEntityId The ID of the API Entity to generate the Portal for.
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function generateOnPremPortalViaAPIEntity(string $apiEntityId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/api-entities/{api_entity_id}/on-prem-portal')
            ->auth('Authorization')
            ->parameters(TemplateParam::init('api_entity_id', $apiEntityId));

        $this->execute($_reqBuilder);
    }

    /**
     * Generate an On-premise Documentation Portal by uploading a Portal Build Input. This endpoint
     * generates all artifacts for the Portal and packages them together into a zip file along with the
     * required HTML, CSS and JS files. The generated artifacts include:
     *
     * 1. SDKs
     * 2. Docs
     * 3. API Specification files
     *
     * The endpoint returns a zip file that contains a static Site and can be hosted on any Web Server.
     *
     * @param FileWrapper $file The input file to the Portal Generator. Must contain the build file.
     *
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function generateOnPremPortalViaBuildInput(FileWrapper $file): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/portal')
            ->auth('Authorization')
            ->parameters(FormParam::init('file', $file));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request'))
            ->throwErrorOn('401', ErrorType::init('Unauthorized'))
            ->throwErrorOn('402', ErrorType::init('Subscription Issue'))
            ->throwErrorOn('422', ErrorType::init('Unprocessable Entity'));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Generate Build Input for a Portal created using the UI workflow.  The Build Input will correspond to
     * the draft version of the Portal i.e. unpublished changes will also be included.
     * This can be used to create a backup of your Portal or to migrate from the UI workflow to the docs as
     * code workflow.
     *
     * @param string $apiGroupId
     * @param string[]|null $apiEntities
     *
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function generateBuildInputForUnpublishedPortal(string $apiGroupId, ?array $apiEntities = null): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/portal/build/{apiGroupId}/draft')
            ->auth('Authorization')
            ->parameters(
                TemplateParam::init('apiGroupId', $apiGroupId),
                QueryParam::init('apiEntities', $apiEntities)
            );

        return $this->execute($_reqBuilder);
    }

    /**
     * Generate Build Input for a Portal created using the UI workflow.  The Build Input will correspond to
     * the published version of the Portal i.e. unpublished changes will not be inlcuded.
     * This can be used to create a backup of your Portal or to migrate from the UI workflow to the docs as
     * code workflow.
     *
     * @param string $apiGroupId
     * @param string[]|null $apiEntities
     *
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function generateBuildInputForPublishedPortal(string $apiGroupId, ?array $apiEntities = null): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/portal/build/{apiGroupId}/published')
            ->auth('Authorization')
            ->parameters(
                TemplateParam::init('apiGroupId', $apiGroupId),
                QueryParam::init('apiEntities', $apiEntities)
            );

        return $this->execute($_reqBuilder);
    }

    /**
     * Unpublish a Hosted or Embedded Portal published for an API Entity. Calling this endpoint deletes all
     * the published artifacts for a Portal from APIMatic's cloud storage.
     *
     * In case of a Hosted Portal, to completely remove the Portal, this endpoint needs to be called
     * against all API versions that the Portal hosts.
     *
     * In case of an Embedded Portal, to completely remove the Portal, the user needs to manually remove
     * the Portal Embed script from the embedding site.
     *
     * @param string $apiEntityId The ID of the API Entity to unpublish the Portal artifacts for.
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function unpublishPortal(string $apiEntityId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/api-entities/{api_entity_id}/portal')
            ->auth('Authorization')
            ->parameters(TemplateParam::init('api_entity_id', $apiEntityId));

        $this->execute($_reqBuilder);
    }
}
