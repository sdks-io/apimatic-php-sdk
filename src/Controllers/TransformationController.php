<?php

declare(strict_types=1);

/*
 * ApimaticAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApimaticAPILib\Controllers;

use ApimaticAPILib\Exceptions\ApiException;
use ApimaticAPILib\Models\ExportFormats;
use ApimaticAPILib\Models\Transformation;
use ApimaticAPILib\Models\TransformViaUrlRequest;
use ApimaticAPILib\Utils\FileWrapper;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use CoreInterfaces\Core\Request\RequestMethod;

class TransformationController extends BaseController
{
    /**
     * Transform an API into any of the supported API specification formats by uploading the API
     * specification file. This endpoint transforms and then uploads the transformed API specification to
     * APIMatic's cloud storage. An ID for the transformation performed is returned as part of the response.
     *
     * @param FileWrapper $file The API specification file.<br>The type of the specification file
     *        should be any of the [supported formats](https://docs.apimatic.io/api-
     *        transformer/overview-transformer#supported-input-formats).
     * @param string $exportFormat The structure contains API specification formats that Transformer
     *        can convert to.
     *
     * @return Transformation Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function transformViaFile(FileWrapper $file, string $exportFormat): Transformation
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transformations/transform-via-file')
            ->auth('Authorization')
            ->parameters(
                FormParam::init('file', $file),
                FormParam::init('export_format', $exportFormat)->serializeBy([ExportFormats::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()->type(Transformation::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Transform an API into any of the supported API specification formats by providing the URL of the API
     * specification file.
     *
     * This endpoint transforms and then uploads the transformed API specification to APIMatic's cloud
     * storage. An ID for the transformation performed is returned as part of the response.
     *
     * @param TransformViaUrlRequest $body Request Body
     *
     * @return Transformation Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function transformViaURL(TransformViaUrlRequest $body): Transformation
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transformations/transform-via-url')
            ->auth('Authorization')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/vnd.apimatic.urlTransformDto.v1+json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()->type(Transformation::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Download the transformed API specification file transformed via the Transformation endpoints.
     *
     * @param string $transformationId The ID of transformation received in the response of the
     *        [Transform Via File ](https://www.apimatic.io/api-docs-
     *        preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *        endpoints/transformation/transform-via-file) or [Transform Via URL  ](https://www.
     *        apimatic.io/api-docs-preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *        endpoints/transformation/transform-via-url) calls.
     *
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function downloadTransformedFile(string $transformationId): string
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transformations/{transformation_id}/converted-file'
        )->auth('Authorization')->parameters(TemplateParam::init('transformation_id', $transformationId));

        return $this->execute($_reqBuilder);
    }

    /**
     * Download the API Specification file used as input for a particular Transformation performed via the
     * Transformation endpoints.
     *
     * @param string $transformationId The ID of the transformation to download the API
     *        specification for. The transformation ID is received in the response of the
     *        [Transform Via File ](https://www.apimatic.io/api-docs-
     *        preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *        endpoints/transformation/transform-via-file) or [Transform Via URL](https://www.
     *        apimatic.io/api-docs-preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *        endpoints/transformation/transform-via-url) calls.
     *
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function downloadInputFileTransformation(string $transformationId): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/transformations/{transformation_id}/input-file')
            ->auth('Authorization')
            ->parameters(TemplateParam::init('transformation_id', $transformationId));

        return $this->execute($_reqBuilder);
    }

    /**
     * Get a list of all API transformations performed.
     *
     * @return Transformation[] Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listAllTransformations(): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/transformations')->auth('Authorization');

        $_resHandler = $this->responseHandler()->type(Transformation::class, 1);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get details on a particular Transformation performed via the Transformation endpoints.
     *
     * @param string $transformationId The ID of the transformation to fetch. The transformation ID
     *        is received in the response of the [Transform Via File ](https://www.apimatic.io/api-
     *        docs-preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *        endpoints/transformation/transform-via-file) or [Transform Via URL  ](https://www.
     *        apimatic.io/api-docs-preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *        endpoints/transformation/transform-via-url) calls.
     *
     * @return Transformation Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getATransformation(string $transformationId): Transformation
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/transformations/{transformation_id}')
            ->auth('Authorization')
            ->parameters(TemplateParam::init('transformation_id', $transformationId));

        $_resHandler = $this->responseHandler()->type(Transformation::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete a particular Transformation performed for an API via the Transformation endpoints.
     *
     * @param string $transformationId The ID of the transformation to delete. The transformation ID
     *        is received in the response of the [Transform Via File ](https://www.apimatic.io/api-
     *        docs-preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *        endpoints/transformation/transform-via-file) or [Transform Via URL](https://www.
     *        apimatic.io/api-docs-preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *        endpoints/transformation/transform-via-url) calls.
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteTransformation(string $transformationId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/transformations/{transformation_id}')
            ->auth('Authorization')
            ->parameters(TemplateParam::init('transformation_id', $transformationId));

        $this->execute($_reqBuilder);
    }
}
