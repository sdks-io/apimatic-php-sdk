<?php

declare(strict_types=1);

/*
 * ApimaticAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApimaticAPILib\Models;

use stdClass;

/**
 * Server configurations can be used to create multiple environments, multiple servers that can be used
 * with specific endpoints and server URLs with template paramters.
 */
class ServerConfiguration implements \JsonSerializable
{
    /**
     * @var string
     */
    private $id;

    /**
     * @var string
     */
    private $defaultEnvironment;

    /**
     * @var string
     */
    private $defaultServer;

    /**
     * @var Environment[]
     */
    private $environments;

    /**
     * @var Parameter[]
     */
    private $parameters;

    /**
     * @param string $id
     * @param string $defaultEnvironment
     * @param string $defaultServer
     * @param Environment[] $environments
     * @param Parameter[] $parameters
     */
    public function __construct(
        string $id,
        string $defaultEnvironment,
        string $defaultServer,
        array $environments,
        array $parameters
    ) {
        $this->id = $id;
        $this->defaultEnvironment = $defaultEnvironment;
        $this->defaultServer = $defaultServer;
        $this->environments = $environments;
        $this->parameters = $parameters;
    }

    /**
     * Returns Id.
     * Server Config Identifier
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Server Config Identifier
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Default Environment.
     * Default Environment
     */
    public function getDefaultEnvironment(): string
    {
        return $this->defaultEnvironment;
    }

    /**
     * Sets Default Environment.
     * Default Environment
     *
     * @required
     * @maps defaultEnvironment
     */
    public function setDefaultEnvironment(string $defaultEnvironment): void
    {
        $this->defaultEnvironment = $defaultEnvironment;
    }

    /**
     * Returns Default Server.
     * Default Server
     */
    public function getDefaultServer(): string
    {
        return $this->defaultServer;
    }

    /**
     * Sets Default Server.
     * Default Server
     *
     * @required
     * @maps defaultServer
     */
    public function setDefaultServer(string $defaultServer): void
    {
        $this->defaultServer = $defaultServer;
    }

    /**
     * Returns Environments.
     * Environment Identifier and Name
     *
     * @return Environment[]
     */
    public function getEnvironments(): array
    {
        return $this->environments;
    }

    /**
     * Sets Environments.
     * Environment Identifier and Name
     *
     * @required
     * @maps environments
     *
     * @param Environment[] $environments
     */
    public function setEnvironments(array $environments): void
    {
        $this->environments = $environments;
    }

    /**
     * Returns Parameters.
     * Parameter Attributes
     *
     * @return Parameter[]
     */
    public function getParameters(): array
    {
        return $this->parameters;
    }

    /**
     * Sets Parameters.
     * Parameter Attributes
     *
     * @required
     * @maps parameters
     *
     * @param Parameter[] $parameters
     */
    public function setParameters(array $parameters): void
    {
        $this->parameters = $parameters;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['id']                 = $this->id;
        $json['defaultEnvironment'] = $this->defaultEnvironment;
        $json['defaultServer']      = $this->defaultServer;
        $json['environments']       = $this->environments;
        $json['parameters']         = $this->parameters;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
