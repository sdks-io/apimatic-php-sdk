<?php

declare(strict_types=1);

/*
 * ApimaticAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApimaticAPILib\Models;

use stdClass;

/**
 * This Structure encapsulates all details of API authentication.
 */
class Authentication implements \JsonSerializable
{
    /**
     * @var string
     */
    private $id;

    /**
     * @var string
     */
    private $authType;

    /**
     * @var AuthScope[]
     */
    private $scopes;

    /**
     * @var string[]
     */
    private $parameters;

    /**
     * @var string[]
     */
    private $authScopes;

    /**
     * @var string[]
     */
    private $authGrantTypes;

    /**
     * @var array
     */
    private $paramFormats;

    /**
     * @param string $id
     * @param string $authType
     * @param AuthScope[] $scopes
     * @param string[] $parameters
     * @param string[] $authScopes
     * @param string[] $authGrantTypes
     * @param array $paramFormats
     */
    public function __construct(
        string $id,
        string $authType,
        array $scopes,
        array $parameters,
        array $authScopes,
        array $authGrantTypes,
        array $paramFormats
    ) {
        $this->id = $id;
        $this->authType = $authType;
        $this->scopes = $scopes;
        $this->parameters = $parameters;
        $this->authScopes = $authScopes;
        $this->authGrantTypes = $authGrantTypes;
        $this->paramFormats = $paramFormats;
    }

    /**
     * Returns Id.
     * Auth Id
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Auth Id
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Auth Type.
     * Auth Type
     */
    public function getAuthType(): string
    {
        return $this->authType;
    }

    /**
     * Sets Auth Type.
     * Auth Type
     *
     * @required
     * @maps authType
     */
    public function setAuthType(string $authType): void
    {
        $this->authType = $authType;
    }

    /**
     * Returns Scopes.
     * Scope
     *
     * @return AuthScope[]
     */
    public function getScopes(): array
    {
        return $this->scopes;
    }

    /**
     * Sets Scopes.
     * Scope
     *
     * @required
     * @maps scopes
     *
     * @param AuthScope[] $scopes
     */
    public function setScopes(array $scopes): void
    {
        $this->scopes = $scopes;
    }

    /**
     * Returns Parameters.
     * Auth Params
     *
     * @return string[]
     */
    public function getParameters(): array
    {
        return $this->parameters;
    }

    /**
     * Sets Parameters.
     * Auth Params
     *
     * @required
     * @maps parameters
     *
     * @param string[] $parameters
     */
    public function setParameters(array $parameters): void
    {
        $this->parameters = $parameters;
    }

    /**
     * Returns Auth Scopes.
     * Auth Scopes
     *
     * @return string[]
     */
    public function getAuthScopes(): array
    {
        return $this->authScopes;
    }

    /**
     * Sets Auth Scopes.
     * Auth Scopes
     *
     * @required
     * @maps authScopes
     *
     * @param string[] $authScopes
     */
    public function setAuthScopes(array $authScopes): void
    {
        $this->authScopes = $authScopes;
    }

    /**
     * Returns Auth Grant Types.
     * Auth Grant Types
     *
     * @return string[]
     */
    public function getAuthGrantTypes(): array
    {
        return $this->authGrantTypes;
    }

    /**
     * Sets Auth Grant Types.
     * Auth Grant Types
     *
     * @required
     * @maps authGrantTypes
     *
     * @param string[] $authGrantTypes
     */
    public function setAuthGrantTypes(array $authGrantTypes): void
    {
        $this->authGrantTypes = $authGrantTypes;
    }

    /**
     * Returns Param Formats.
     * Paramater Formats
     */
    public function getParamFormats(): array
    {
        return $this->paramFormats;
    }

    /**
     * Sets Param Formats.
     * Paramater Formats
     *
     * @required
     * @maps paramFormats
     */
    public function setParamFormats(array $paramFormats): void
    {
        $this->paramFormats = $paramFormats;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['id']             = $this->id;
        $json['authType']       = $this->authType;
        $json['scopes']         = $this->scopes;
        $json['parameters']     = $this->parameters;
        $json['authScopes']     = $this->authScopes;
        $json['authGrantTypes'] = $this->authGrantTypes;
        $json['paramFormats']   = $this->paramFormats;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
