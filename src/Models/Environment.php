<?php

declare(strict_types=1);

/*
 * ApimaticAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApimaticAPILib\Models;

use stdClass;

/**
 * An environment consists of a set of servers with base URL values. The environment can be changed
 * programatically allowing rapid switching between different environments. For example the user can
 * specify a Production and Testing Environment and switch between them in the generated SDK.
 */
class Environment implements \JsonSerializable
{
    /**
     * @var string
     */
    private $id;

    /**
     * @var string
     */
    private $name;

    /**
     * @var Server[]
     */
    private $servers;

    /**
     * @param string $id
     * @param string $name
     * @param Server[] $servers
     */
    public function __construct(string $id, string $name, array $servers)
    {
        $this->id = $id;
        $this->name = $name;
        $this->servers = $servers;
    }

    /**
     * Returns Id.
     * Unique Environment Identifier
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique Environment Identifier
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Name.
     * Environment Name
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Environment Name
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Servers.
     * The user can specify multiple servers within an environment. A server comprises of a name and a url.
     *
     * @return Server[]
     */
    public function getServers(): array
    {
        return $this->servers;
    }

    /**
     * Sets Servers.
     * The user can specify multiple servers within an environment. A server comprises of a name and a url.
     *
     * @required
     * @maps servers
     *
     * @param Server[] $servers
     */
    public function setServers(array $servers): void
    {
        $this->servers = $servers;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['id']      = $this->id;
        $json['name']    = $this->name;
        $json['servers'] = $this->servers;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
