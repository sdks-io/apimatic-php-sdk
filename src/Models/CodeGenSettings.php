<?php

declare(strict_types=1);

/*
 * ApimaticAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApimaticAPILib\Models;

use stdClass;

/**
 * APIMaticâ€™s code generation engine has various code generation configurations to customise the
 * behaviour and outlook across the generated SDKS. This structure encapsulates all settings for
 * CodeGeneration.
 */
class CodeGenSettings implements \JsonSerializable
{
    /**
     * @var bool
     */
    private $isAsync;

    /**
     * @var bool
     */
    private $useHttpMethodPrefix;

    /**
     * @var bool
     */
    private $useModelPrefix;

    /**
     * @var bool
     */
    private $useEnumPrefix;

    /**
     * @var bool
     */
    private $useConstructorsForConfig;

    /**
     * @var bool
     */
    private $useCommonSdkLibrary;

    /**
     * @var bool
     */
    private $generateInterfaces;

    /**
     * @var bool
     */
    private $generateAppveyorConfig;

    /**
     * @var bool
     */
    private $generateCircleConfig;

    /**
     * @var bool
     */
    private $generateJenkinsConfig;

    /**
     * @var bool
     */
    private $generateTravisConfig;

    /**
     * @var bool
     */
    private $androidUseAppManifest;

    /**
     * @var bool
     */
    private $iosUseAppInfoPlist;

    /**
     * @var bool
     */
    private $iosGenerateCoreData;

    /**
     * @var bool
     */
    private $runscopeEnabled;

    /**
     * @var bool
     */
    private $collapseParamsToArray;

    /**
     * @var bool
     */
    private $preserveParameterOrder;

    /**
     * @var bool
     */
    private $appendContentHeaders;

    /**
     * @var bool
     */
    private $modelSerializationIsJSON;

    /**
     * @var bool
     */
    private $nullify404;

    /**
     * @var bool
     */
    private $validateRequiredParameters;

    /**
     * @var bool
     */
    private $enableAdditionalModelProperties;

    /**
     * @var bool
     */
    private $javaUsePropertiesConfig;

    /**
     * @var bool
     */
    private $useControllerPrefix;

    /**
     * @var bool
     */
    private $useExceptionPrefix;

    /**
     * @var string
     */
    private $parameterArrayFormat;

    /**
     * @var string
     */
    private $objCHttpClient;

    /**
     * @var string
     */
    private $cSharpHttpClient;

    /**
     * @var string
     */
    private $androidHttpClient;

    /**
     * @var string
     */
    private $nodeHttpClient;

    /**
     * @var string
     */
    private $phpHttpClient;

    /**
     * @var int
     */
    private $bodySerialization;

    /**
     * @var string
     */
    private $arraySerialization;

    /**
     * @var int
     */
    private $timeout;

    /**
     * @var bool
     */
    private $enableLogging;

    /**
     * @var bool
     */
    private $enableHttpCache;

    /**
     * @var int
     */
    private $retries;

    /**
     * @var int
     */
    private $retryInterval;

    /**
     * @var bool
     */
    private $generateAdvancedDocs;

    /**
     * @var bool
     */
    private $storeTimezoneInformation;

    /**
     * @var bool
     */
    private $enablePhpComposerVersionString;

    /**
     * @var string[]
     */
    private $securityProtocols;

    /**
     * @var bool
     */
    private $underscoreNumbers;

    /**
     * @var bool
     */
    private $useSingletonPattern;

    /**
     * @var bool
     */
    private $disableLinting;

    /**
     * @var bool
     */
    private $allowSkippingSSLCertVerification;

    /**
     * @var string[]
     */
    private $applyCustomizations;

    /**
     * @var string[]
     */
    private $doNotSplitWords;

    /**
     * @var bool
     */
    private $sortResources;

    /**
     * @var bool
     */
    private $enableGlobalUserAgent;

    /**
     * @param bool $isAsync
     * @param bool $useHttpMethodPrefix
     * @param bool $useModelPrefix
     * @param bool $useEnumPrefix
     * @param bool $useConstructorsForConfig
     * @param bool $useCommonSdkLibrary
     * @param bool $generateInterfaces
     * @param bool $generateAppveyorConfig
     * @param bool $generateCircleConfig
     * @param bool $generateJenkinsConfig
     * @param bool $generateTravisConfig
     * @param bool $androidUseAppManifest
     * @param bool $iosUseAppInfoPlist
     * @param bool $iosGenerateCoreData
     * @param bool $runscopeEnabled
     * @param bool $collapseParamsToArray
     * @param bool $preserveParameterOrder
     * @param bool $appendContentHeaders
     * @param bool $modelSerializationIsJSON
     * @param bool $nullify404
     * @param bool $validateRequiredParameters
     * @param bool $enableAdditionalModelProperties
     * @param bool $javaUsePropertiesConfig
     * @param bool $useControllerPrefix
     * @param bool $useExceptionPrefix
     * @param string $parameterArrayFormat
     * @param string $objCHttpClient
     * @param string $cSharpHttpClient
     * @param string $androidHttpClient
     * @param string $nodeHttpClient
     * @param string $phpHttpClient
     * @param int $bodySerialization
     * @param string $arraySerialization
     * @param int $timeout
     * @param bool $enableLogging
     * @param bool $enableHttpCache
     * @param int $retries
     * @param int $retryInterval
     * @param bool $generateAdvancedDocs
     * @param bool $storeTimezoneInformation
     * @param bool $enablePhpComposerVersionString
     * @param string[] $securityProtocols
     * @param bool $underscoreNumbers
     * @param bool $useSingletonPattern
     * @param bool $disableLinting
     * @param bool $allowSkippingSSLCertVerification
     * @param string[] $applyCustomizations
     * @param string[] $doNotSplitWords
     * @param bool $sortResources
     * @param bool $enableGlobalUserAgent
     */
    public function __construct(
        bool $isAsync,
        bool $useHttpMethodPrefix,
        bool $useModelPrefix,
        bool $useEnumPrefix,
        bool $useConstructorsForConfig,
        bool $useCommonSdkLibrary,
        bool $generateInterfaces,
        bool $generateAppveyorConfig,
        bool $generateCircleConfig,
        bool $generateJenkinsConfig,
        bool $generateTravisConfig,
        bool $androidUseAppManifest,
        bool $iosUseAppInfoPlist,
        bool $iosGenerateCoreData,
        bool $runscopeEnabled,
        bool $collapseParamsToArray,
        bool $preserveParameterOrder,
        bool $appendContentHeaders,
        bool $modelSerializationIsJSON,
        bool $nullify404,
        bool $validateRequiredParameters,
        bool $enableAdditionalModelProperties,
        bool $javaUsePropertiesConfig,
        bool $useControllerPrefix,
        bool $useExceptionPrefix,
        string $parameterArrayFormat,
        string $objCHttpClient,
        string $cSharpHttpClient,
        string $androidHttpClient,
        string $nodeHttpClient,
        string $phpHttpClient,
        int $bodySerialization,
        string $arraySerialization,
        int $timeout,
        bool $enableLogging,
        bool $enableHttpCache,
        int $retries,
        int $retryInterval,
        bool $generateAdvancedDocs,
        bool $storeTimezoneInformation,
        bool $enablePhpComposerVersionString,
        array $securityProtocols,
        bool $underscoreNumbers,
        bool $useSingletonPattern,
        bool $disableLinting,
        bool $allowSkippingSSLCertVerification,
        array $applyCustomizations,
        array $doNotSplitWords,
        bool $sortResources,
        bool $enableGlobalUserAgent
    ) {
        $this->isAsync = $isAsync;
        $this->useHttpMethodPrefix = $useHttpMethodPrefix;
        $this->useModelPrefix = $useModelPrefix;
        $this->useEnumPrefix = $useEnumPrefix;
        $this->useConstructorsForConfig = $useConstructorsForConfig;
        $this->useCommonSdkLibrary = $useCommonSdkLibrary;
        $this->generateInterfaces = $generateInterfaces;
        $this->generateAppveyorConfig = $generateAppveyorConfig;
        $this->generateCircleConfig = $generateCircleConfig;
        $this->generateJenkinsConfig = $generateJenkinsConfig;
        $this->generateTravisConfig = $generateTravisConfig;
        $this->androidUseAppManifest = $androidUseAppManifest;
        $this->iosUseAppInfoPlist = $iosUseAppInfoPlist;
        $this->iosGenerateCoreData = $iosGenerateCoreData;
        $this->runscopeEnabled = $runscopeEnabled;
        $this->collapseParamsToArray = $collapseParamsToArray;
        $this->preserveParameterOrder = $preserveParameterOrder;
        $this->appendContentHeaders = $appendContentHeaders;
        $this->modelSerializationIsJSON = $modelSerializationIsJSON;
        $this->nullify404 = $nullify404;
        $this->validateRequiredParameters = $validateRequiredParameters;
        $this->enableAdditionalModelProperties = $enableAdditionalModelProperties;
        $this->javaUsePropertiesConfig = $javaUsePropertiesConfig;
        $this->useControllerPrefix = $useControllerPrefix;
        $this->useExceptionPrefix = $useExceptionPrefix;
        $this->parameterArrayFormat = $parameterArrayFormat;
        $this->objCHttpClient = $objCHttpClient;
        $this->cSharpHttpClient = $cSharpHttpClient;
        $this->androidHttpClient = $androidHttpClient;
        $this->nodeHttpClient = $nodeHttpClient;
        $this->phpHttpClient = $phpHttpClient;
        $this->bodySerialization = $bodySerialization;
        $this->arraySerialization = $arraySerialization;
        $this->timeout = $timeout;
        $this->enableLogging = $enableLogging;
        $this->enableHttpCache = $enableHttpCache;
        $this->retries = $retries;
        $this->retryInterval = $retryInterval;
        $this->generateAdvancedDocs = $generateAdvancedDocs;
        $this->storeTimezoneInformation = $storeTimezoneInformation;
        $this->enablePhpComposerVersionString = $enablePhpComposerVersionString;
        $this->securityProtocols = $securityProtocols;
        $this->underscoreNumbers = $underscoreNumbers;
        $this->useSingletonPattern = $useSingletonPattern;
        $this->disableLinting = $disableLinting;
        $this->allowSkippingSSLCertVerification = $allowSkippingSSLCertVerification;
        $this->applyCustomizations = $applyCustomizations;
        $this->doNotSplitWords = $doNotSplitWords;
        $this->sortResources = $sortResources;
        $this->enableGlobalUserAgent = $enableGlobalUserAgent;
    }

    /**
     * Returns Is Async.
     * Generate asynchronous code for API Calls and deserialization
     */
    public function getIsAsync(): bool
    {
        return $this->isAsync;
    }

    /**
     * Sets Is Async.
     * Generate asynchronous code for API Calls and deserialization
     *
     * @required
     * @maps isAsync
     */
    public function setIsAsync(bool $isAsync): void
    {
        $this->isAsync = $isAsync;
    }

    /**
     * Returns Use Http Method Prefix.
     * Use HTTP Method prefixes for endpoint wrappers
     */
    public function getUseHttpMethodPrefix(): bool
    {
        return $this->useHttpMethodPrefix;
    }

    /**
     * Sets Use Http Method Prefix.
     * Use HTTP Method prefixes for endpoint wrappers
     *
     * @required
     * @maps useHttpMethodPrefix
     */
    public function setUseHttpMethodPrefix(bool $useHttpMethodPrefix): void
    {
        $this->useHttpMethodPrefix = $useHttpMethodPrefix;
    }

    /**
     * Returns Use Model Prefix.
     * Use "Model" postfixes for generated class names
     */
    public function getUseModelPrefix(): bool
    {
        return $this->useModelPrefix;
    }

    /**
     * Sets Use Model Prefix.
     * Use "Model" postfixes for generated class names
     *
     * @required
     * @maps useModelPrefix
     */
    public function setUseModelPrefix(bool $useModelPrefix): void
    {
        $this->useModelPrefix = $useModelPrefix;
    }

    /**
     * Returns Use Enum Prefix.
     * Use "Enum" postfixes for enumerated types
     */
    public function getUseEnumPrefix(): bool
    {
        return $this->useEnumPrefix;
    }

    /**
     * Sets Use Enum Prefix.
     * Use "Enum" postfixes for enumerated types
     *
     * @required
     * @maps useEnumPrefix
     */
    public function setUseEnumPrefix(bool $useEnumPrefix): void
    {
        $this->useEnumPrefix = $useEnumPrefix;
    }

    /**
     * Returns Use Constructors for Config.
     */
    public function getUseConstructorsForConfig(): bool
    {
        return $this->useConstructorsForConfig;
    }

    /**
     * Sets Use Constructors for Config.
     *
     * @required
     * @maps useConstructorsForConfig
     */
    public function setUseConstructorsForConfig(bool $useConstructorsForConfig): void
    {
        $this->useConstructorsForConfig = $useConstructorsForConfig;
    }

    /**
     * Returns Use Common Sdk Library.
     * Use common SDK library to reduce code duplication
     */
    public function getUseCommonSdkLibrary(): bool
    {
        return $this->useCommonSdkLibrary;
    }

    /**
     * Sets Use Common Sdk Library.
     * Use common SDK library to reduce code duplication
     *
     * @required
     * @maps useCommonSdkLibrary
     */
    public function setUseCommonSdkLibrary(bool $useCommonSdkLibrary): void
    {
        $this->useCommonSdkLibrary = $useCommonSdkLibrary;
    }

    /**
     * Returns Generate Interfaces.
     * Generates interfaces for controller classes in the generated SDKs
     */
    public function getGenerateInterfaces(): bool
    {
        return $this->generateInterfaces;
    }

    /**
     * Sets Generate Interfaces.
     * Generates interfaces for controller classes in the generated SDKs
     *
     * @required
     * @maps generateInterfaces
     */
    public function setGenerateInterfaces(bool $generateInterfaces): void
    {
        $this->generateInterfaces = $generateInterfaces;
    }

    /**
     * Returns Generate Appveyor Config.
     * Generate Appveyor configuration file
     */
    public function getGenerateAppveyorConfig(): bool
    {
        return $this->generateAppveyorConfig;
    }

    /**
     * Sets Generate Appveyor Config.
     * Generate Appveyor configuration file
     *
     * @required
     * @maps generateAppveyorConfig
     */
    public function setGenerateAppveyorConfig(bool $generateAppveyorConfig): void
    {
        $this->generateAppveyorConfig = $generateAppveyorConfig;
    }

    /**
     * Returns Generate Circle Config.
     * Generate CircleCI configuration file
     */
    public function getGenerateCircleConfig(): bool
    {
        return $this->generateCircleConfig;
    }

    /**
     * Sets Generate Circle Config.
     * Generate CircleCI configuration file
     *
     * @required
     * @maps generateCircleConfig
     */
    public function setGenerateCircleConfig(bool $generateCircleConfig): void
    {
        $this->generateCircleConfig = $generateCircleConfig;
    }

    /**
     * Returns Generate Jenkins Config.
     * Generate Jenkins configuration file
     */
    public function getGenerateJenkinsConfig(): bool
    {
        return $this->generateJenkinsConfig;
    }

    /**
     * Sets Generate Jenkins Config.
     * Generate Jenkins configuration file
     *
     * @required
     * @maps generateJenkinsConfig
     */
    public function setGenerateJenkinsConfig(bool $generateJenkinsConfig): void
    {
        $this->generateJenkinsConfig = $generateJenkinsConfig;
    }

    /**
     * Returns Generate Travis Config.
     * Generate Travis CI configuration file
     */
    public function getGenerateTravisConfig(): bool
    {
        return $this->generateTravisConfig;
    }

    /**
     * Sets Generate Travis Config.
     * Generate Travis CI configuration file
     *
     * @required
     * @maps generateTravisConfig
     */
    public function setGenerateTravisConfig(bool $generateTravisConfig): void
    {
        $this->generateTravisConfig = $generateTravisConfig;
    }

    /**
     * Returns Android Use App Manifest.
     * Use "AndroidManifest.xml" for config variables in Android
     */
    public function getAndroidUseAppManifest(): bool
    {
        return $this->androidUseAppManifest;
    }

    /**
     * Sets Android Use App Manifest.
     * Use "AndroidManifest.xml" for config variables in Android
     *
     * @required
     * @maps androidUseAppManifest
     */
    public function setAndroidUseAppManifest(bool $androidUseAppManifest): void
    {
        $this->androidUseAppManifest = $androidUseAppManifest;
    }

    /**
     * Returns Ios Use App Info Plist.
     * Use "App-Info.plist" file for config variables in iOS
     */
    public function getIosUseAppInfoPlist(): bool
    {
        return $this->iosUseAppInfoPlist;
    }

    /**
     * Sets Ios Use App Info Plist.
     * Use "App-Info.plist" file for config variables in iOS
     *
     * @required
     * @maps iosUseAppInfoPlist
     */
    public function setIosUseAppInfoPlist(bool $iosUseAppInfoPlist): void
    {
        $this->iosUseAppInfoPlist = $iosUseAppInfoPlist;
    }

    /**
     * Returns Ios Generate Core Data.
     * Generate "CoreData" schema and entity classes in iOS?
     */
    public function getIosGenerateCoreData(): bool
    {
        return $this->iosGenerateCoreData;
    }

    /**
     * Sets Ios Generate Core Data.
     * Generate "CoreData" schema and entity classes in iOS?
     *
     * @required
     * @maps iosGenerateCoreData
     */
    public function setIosGenerateCoreData(bool $iosGenerateCoreData): void
    {
        $this->iosGenerateCoreData = $iosGenerateCoreData;
    }

    /**
     * Returns Runscope Enabled.
     * Enable runscope
     */
    public function getRunscopeEnabled(): bool
    {
        return $this->runscopeEnabled;
    }

    /**
     * Sets Runscope Enabled.
     * Enable runscope
     *
     * @required
     * @maps runscopeEnabled
     */
    public function setRunscopeEnabled(bool $runscopeEnabled): void
    {
        $this->runscopeEnabled = $runscopeEnabled;
    }

    /**
     * Returns Collapse Params to Array.
     * Collect Parameters as arrays
     */
    public function getCollapseParamsToArray(): bool
    {
        return $this->collapseParamsToArray;
    }

    /**
     * Sets Collapse Params to Array.
     * Collect Parameters as arrays
     *
     * @required
     * @maps collapseParamsToArray
     */
    public function setCollapseParamsToArray(bool $collapseParamsToArray): void
    {
        $this->collapseParamsToArray = $collapseParamsToArray;
    }

    /**
     * Returns Preserve Parameter Order.
     * Attempts to preserve parameter order for endpoints
     */
    public function getPreserveParameterOrder(): bool
    {
        return $this->preserveParameterOrder;
    }

    /**
     * Sets Preserve Parameter Order.
     * Attempts to preserve parameter order for endpoints
     *
     * @required
     * @maps preserveParameterOrder
     */
    public function setPreserveParameterOrder(bool $preserveParameterOrder): void
    {
        $this->preserveParameterOrder = $preserveParameterOrder;
    }

    /**
     * Returns Append Content Headers.
     * Append JSON/XML accept and content-type headers
     */
    public function getAppendContentHeaders(): bool
    {
        return $this->appendContentHeaders;
    }

    /**
     * Sets Append Content Headers.
     * Append JSON/XML accept and content-type headers
     *
     * @required
     * @maps appendContentHeaders
     */
    public function setAppendContentHeaders(bool $appendContentHeaders): void
    {
        $this->appendContentHeaders = $appendContentHeaders;
    }

    /**
     * Returns Model Serialization Is JSON.
     */
    public function getModelSerializationIsJSON(): bool
    {
        return $this->modelSerializationIsJSON;
    }

    /**
     * Sets Model Serialization Is JSON.
     *
     * @required
     * @maps modelSerializationIsJSON
     */
    public function setModelSerializationIsJSON(bool $modelSerializationIsJSON): void
    {
        $this->modelSerializationIsJSON = $modelSerializationIsJSON;
    }

    /**
     * Returns Nullify 404.
     * Return a null value on HTTP 404
     */
    public function getNullify404(): bool
    {
        return $this->nullify404;
    }

    /**
     * Sets Nullify 404.
     * Return a null value on HTTP 404
     *
     * @required
     * @maps nullify404
     */
    public function setNullify404(bool $nullify404): void
    {
        $this->nullify404 = $nullify404;
    }

    /**
     * Returns Validate Required Parameters.
     * Validate required parameters to be Not Null
     */
    public function getValidateRequiredParameters(): bool
    {
        return $this->validateRequiredParameters;
    }

    /**
     * Sets Validate Required Parameters.
     * Validate required parameters to be Not Null
     *
     * @required
     * @maps validateRequiredParameters
     */
    public function setValidateRequiredParameters(bool $validateRequiredParameters): void
    {
        $this->validateRequiredParameters = $validateRequiredParameters;
    }

    /**
     * Returns Enable Additional Model Properties.
     * Allow models to have additional runtime properties
     */
    public function getEnableAdditionalModelProperties(): bool
    {
        return $this->enableAdditionalModelProperties;
    }

    /**
     * Sets Enable Additional Model Properties.
     * Allow models to have additional runtime properties
     *
     * @required
     * @maps enableAdditionalModelProperties
     */
    public function setEnableAdditionalModelProperties(bool $enableAdditionalModelProperties): void
    {
        $this->enableAdditionalModelProperties = $enableAdditionalModelProperties;
    }

    /**
     * Returns Java Use Properties Config.
     */
    public function getJavaUsePropertiesConfig(): bool
    {
        return $this->javaUsePropertiesConfig;
    }

    /**
     * Sets Java Use Properties Config.
     *
     * @required
     * @maps javaUsePropertiesConfig
     */
    public function setJavaUsePropertiesConfig(bool $javaUsePropertiesConfig): void
    {
        $this->javaUsePropertiesConfig = $javaUsePropertiesConfig;
    }

    /**
     * Returns Use Controller Prefix.
     * Use "Controller" postfixes for generated controller classes
     */
    public function getUseControllerPrefix(): bool
    {
        return $this->useControllerPrefix;
    }

    /**
     * Sets Use Controller Prefix.
     * Use "Controller" postfixes for generated controller classes
     *
     * @required
     * @maps useControllerPrefix
     */
    public function setUseControllerPrefix(bool $useControllerPrefix): void
    {
        $this->useControllerPrefix = $useControllerPrefix;
    }

    /**
     * Returns Use Exception Prefix.
     * Use Exception Prefixes
     */
    public function getUseExceptionPrefix(): bool
    {
        return $this->useExceptionPrefix;
    }

    /**
     * Sets Use Exception Prefix.
     * Use Exception Prefixes
     *
     * @required
     * @maps useExceptionPrefix
     */
    public function setUseExceptionPrefix(bool $useExceptionPrefix): void
    {
        $this->useExceptionPrefix = $useExceptionPrefix;
    }

    /**
     * Returns Parameter Array Format.
     * Parameter Array format with index or without
     */
    public function getParameterArrayFormat(): string
    {
        return $this->parameterArrayFormat;
    }

    /**
     * Sets Parameter Array Format.
     * Parameter Array format with index or without
     *
     * @required
     * @maps parameterArrayFormat
     */
    public function setParameterArrayFormat(string $parameterArrayFormat): void
    {
        $this->parameterArrayFormat = $parameterArrayFormat;
    }

    /**
     * Returns Obj C Http Client.
     * Configure the HTTP client for Objective C
     */
    public function getObjCHttpClient(): string
    {
        return $this->objCHttpClient;
    }

    /**
     * Sets Obj C Http Client.
     * Configure the HTTP client for Objective C
     *
     * @required
     * @maps objCHttpClient
     */
    public function setObjCHttpClient(string $objCHttpClient): void
    {
        $this->objCHttpClient = $objCHttpClient;
    }

    /**
     * Returns C Sharp Http Client.
     * Configure the HTTP client for C#
     */
    public function getCSharpHttpClient(): string
    {
        return $this->cSharpHttpClient;
    }

    /**
     * Sets C Sharp Http Client.
     * Configure the HTTP client for C#
     *
     * @required
     * @maps cSharpHttpClient
     */
    public function setCSharpHttpClient(string $cSharpHttpClient): void
    {
        $this->cSharpHttpClient = $cSharpHttpClient;
    }

    /**
     * Returns Android Http Client.
     * Configure the HTTP client for  Android
     */
    public function getAndroidHttpClient(): string
    {
        return $this->androidHttpClient;
    }

    /**
     * Sets Android Http Client.
     * Configure the HTTP client for  Android
     *
     * @required
     * @maps androidHttpClient
     */
    public function setAndroidHttpClient(string $androidHttpClient): void
    {
        $this->androidHttpClient = $androidHttpClient;
    }

    /**
     * Returns Node Http Client.
     * Configure the HTTP client for node
     */
    public function getNodeHttpClient(): string
    {
        return $this->nodeHttpClient;
    }

    /**
     * Sets Node Http Client.
     * Configure the HTTP client for node
     *
     * @required
     * @maps nodeHttpClient
     */
    public function setNodeHttpClient(string $nodeHttpClient): void
    {
        $this->nodeHttpClient = $nodeHttpClient;
    }

    /**
     * Returns Php Http Client.
     * Configure the HTTP client for PHP
     */
    public function getPhpHttpClient(): string
    {
        return $this->phpHttpClient;
    }

    /**
     * Sets Php Http Client.
     * Configure the HTTP client for PHP
     *
     * @required
     * @maps phpHttpClient
     */
    public function setPhpHttpClient(string $phpHttpClient): void
    {
        $this->phpHttpClient = $phpHttpClient;
    }

    /**
     * Returns Body Serialization.
     */
    public function getBodySerialization(): int
    {
        return $this->bodySerialization;
    }

    /**
     * Sets Body Serialization.
     *
     * @required
     * @maps bodySerialization
     */
    public function setBodySerialization(int $bodySerialization): void
    {
        $this->bodySerialization = $bodySerialization;
    }

    /**
     * Returns Array Serialization.
     * Specify type of array serialisation
     */
    public function getArraySerialization(): string
    {
        return $this->arraySerialization;
    }

    /**
     * Sets Array Serialization.
     * Specify type of array serialisation
     *
     * @required
     * @maps arraySerialization
     */
    public function setArraySerialization(string $arraySerialization): void
    {
        $this->arraySerialization = $arraySerialization;
    }

    /**
     * Returns Timeout.
     * This option specifies the duration (in seconds) after which requests would timeout
     */
    public function getTimeout(): int
    {
        return $this->timeout;
    }

    /**
     * Sets Timeout.
     * This option specifies the duration (in seconds) after which requests would timeout
     *
     * @required
     * @maps timeout
     */
    public function setTimeout(int $timeout): void
    {
        $this->timeout = $timeout;
    }

    /**
     * Returns Enable Logging.
     * Enabling this generates code in the SDKs for logging events in the API cycle using a library.
     */
    public function getEnableLogging(): bool
    {
        return $this->enableLogging;
    }

    /**
     * Sets Enable Logging.
     * Enabling this generates code in the SDKs for logging events in the API cycle using a library.
     *
     * @required
     * @maps enableLogging
     */
    public function setEnableLogging(bool $enableLogging): void
    {
        $this->enableLogging = $enableLogging;
    }

    /**
     * Returns Enable Http Cache.
     * Enabling caching of responses (not available in all languages)
     */
    public function getEnableHttpCache(): bool
    {
        return $this->enableHttpCache;
    }

    /**
     * Sets Enable Http Cache.
     * Enabling caching of responses (not available in all languages)
     *
     * @required
     * @maps enableHttpCache
     */
    public function setEnableHttpCache(bool $enableHttpCache): void
    {
        $this->enableHttpCache = $enableHttpCache;
    }

    /**
     * Returns Retries.
     * Specify number of retries
     */
    public function getRetries(): int
    {
        return $this->retries;
    }

    /**
     * Sets Retries.
     * Specify number of retries
     *
     * @required
     * @maps retries
     */
    public function setRetries(int $retries): void
    {
        $this->retries = $retries;
    }

    /**
     * Returns Retry Interval.
     * Specify retry interval in case of failures
     */
    public function getRetryInterval(): int
    {
        return $this->retryInterval;
    }

    /**
     * Sets Retry Interval.
     * Specify retry interval in case of failures
     *
     * @required
     * @maps retryInterval
     */
    public function setRetryInterval(int $retryInterval): void
    {
        $this->retryInterval = $retryInterval;
    }

    /**
     * Returns Generate Advanced Docs.
     * Generate advanced read me files
     */
    public function getGenerateAdvancedDocs(): bool
    {
        return $this->generateAdvancedDocs;
    }

    /**
     * Sets Generate Advanced Docs.
     * Generate advanced read me files
     *
     * @required
     * @maps generateAdvancedDocs
     */
    public function setGenerateAdvancedDocs(bool $generateAdvancedDocs): void
    {
        $this->generateAdvancedDocs = $generateAdvancedDocs;
    }

    /**
     * Returns Store Timezone Information.
     * Store Timezone information for the generation
     */
    public function getStoreTimezoneInformation(): bool
    {
        return $this->storeTimezoneInformation;
    }

    /**
     * Sets Store Timezone Information.
     * Store Timezone information for the generation
     *
     * @required
     * @maps storeTimezoneInformation
     */
    public function setStoreTimezoneInformation(bool $storeTimezoneInformation): void
    {
        $this->storeTimezoneInformation = $storeTimezoneInformation;
    }

    /**
     * Returns Enable Php Composer Version String.
     * Use "Controller" postfixes for generated controller classes
     */
    public function getEnablePhpComposerVersionString(): bool
    {
        return $this->enablePhpComposerVersionString;
    }

    /**
     * Sets Enable Php Composer Version String.
     * Use "Controller" postfixes for generated controller classes
     *
     * @required
     * @maps enablePhpComposerVersionString
     */
    public function setEnablePhpComposerVersionString(bool $enablePhpComposerVersionString): void
    {
        $this->enablePhpComposerVersionString = $enablePhpComposerVersionString;
    }

    /**
     * Returns Security Protocols.
     * Specify Security Protocols
     *
     * @return string[]
     */
    public function getSecurityProtocols(): array
    {
        return $this->securityProtocols;
    }

    /**
     * Sets Security Protocols.
     * Specify Security Protocols
     *
     * @required
     * @maps securityProtocols
     *
     * @param string[] $securityProtocols
     */
    public function setSecurityProtocols(array $securityProtocols): void
    {
        $this->securityProtocols = $securityProtocols;
    }

    /**
     * Returns Underscore Numbers.
     * Use underscores before and after numbers for underscore case
     */
    public function getUnderscoreNumbers(): bool
    {
        return $this->underscoreNumbers;
    }

    /**
     * Sets Underscore Numbers.
     * Use underscores before and after numbers for underscore case
     *
     * @required
     * @maps underscoreNumbers
     */
    public function setUnderscoreNumbers(bool $underscoreNumbers): void
    {
        $this->underscoreNumbers = $underscoreNumbers;
    }

    /**
     * Returns Use Singleton Pattern.
     * Allow usage of a Singleton Pattern
     */
    public function getUseSingletonPattern(): bool
    {
        return $this->useSingletonPattern;
    }

    /**
     * Sets Use Singleton Pattern.
     * Allow usage of a Singleton Pattern
     *
     * @required
     * @maps useSingletonPattern
     */
    public function setUseSingletonPattern(bool $useSingletonPattern): void
    {
        $this->useSingletonPattern = $useSingletonPattern;
    }

    /**
     * Returns Disable Linting.
     * Files/dependencies used for linting are not generated if this option is enabled
     */
    public function getDisableLinting(): bool
    {
        return $this->disableLinting;
    }

    /**
     * Sets Disable Linting.
     * Files/dependencies used for linting are not generated if this option is enabled
     *
     * @required
     * @maps disableLinting
     */
    public function setDisableLinting(bool $disableLinting): void
    {
        $this->disableLinting = $disableLinting;
    }

    /**
     * Returns Allow Skipping SSL Cert Verification.
     * Create a configuration option in SDKs to optionally skip certificate verification when establishing
     * HTTPS connections.
     */
    public function getAllowSkippingSSLCertVerification(): bool
    {
        return $this->allowSkippingSSLCertVerification;
    }

    /**
     * Sets Allow Skipping SSL Cert Verification.
     * Create a configuration option in SDKs to optionally skip certificate verification when establishing
     * HTTPS connections.
     *
     * @required
     * @maps allowSkippingSSLCertVerification
     */
    public function setAllowSkippingSSLCertVerification(bool $allowSkippingSSLCertVerification): void
    {
        $this->allowSkippingSSLCertVerification = $allowSkippingSSLCertVerification;
    }

    /**
     * Returns Apply Customizations.
     * Apply Customisations
     *
     * @return string[]
     */
    public function getApplyCustomizations(): array
    {
        return $this->applyCustomizations;
    }

    /**
     * Sets Apply Customizations.
     * Apply Customisations
     *
     * @required
     * @maps applyCustomizations
     *
     * @param string[] $applyCustomizations
     */
    public function setApplyCustomizations(array $applyCustomizations): void
    {
        $this->applyCustomizations = $applyCustomizations;
    }

    /**
     * Returns Do Not Split Words.
     * Enabling this will stop splitting of words when converting identifiers from API specification to
     * language-specific identifiers.
     *
     * @return string[]
     */
    public function getDoNotSplitWords(): array
    {
        return $this->doNotSplitWords;
    }

    /**
     * Sets Do Not Split Words.
     * Enabling this will stop splitting of words when converting identifiers from API specification to
     * language-specific identifiers.
     *
     * @required
     * @maps doNotSplitWords
     *
     * @param string[] $doNotSplitWords
     */
    public function setDoNotSplitWords(array $doNotSplitWords): void
    {
        $this->doNotSplitWords = $doNotSplitWords;
    }

    /**
     * Returns Sort Resources.
     * Sorts resources such as endpoints, endpoint groups and models in generated documentation
     */
    public function getSortResources(): bool
    {
        return $this->sortResources;
    }

    /**
     * Sets Sort Resources.
     * Sorts resources such as endpoints, endpoint groups and models in generated documentation
     *
     * @required
     * @maps sortResources
     */
    public function setSortResources(bool $sortResources): void
    {
        $this->sortResources = $sortResources;
    }

    /**
     * Returns Enable Global User Agent.
     * Enable a global user agent
     */
    public function getEnableGlobalUserAgent(): bool
    {
        return $this->enableGlobalUserAgent;
    }

    /**
     * Sets Enable Global User Agent.
     * Enable a global user agent
     *
     * @required
     * @maps enableGlobalUserAgent
     */
    public function setEnableGlobalUserAgent(bool $enableGlobalUserAgent): void
    {
        $this->enableGlobalUserAgent = $enableGlobalUserAgent;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['isAsync']                          = $this->isAsync;
        $json['useHttpMethodPrefix']              = $this->useHttpMethodPrefix;
        $json['useModelPrefix']                   = $this->useModelPrefix;
        $json['useEnumPrefix']                    = $this->useEnumPrefix;
        $json['useConstructorsForConfig']         = $this->useConstructorsForConfig;
        $json['useCommonSdkLibrary']              = $this->useCommonSdkLibrary;
        $json['generateInterfaces']               = $this->generateInterfaces;
        $json['generateAppveyorConfig']           = $this->generateAppveyorConfig;
        $json['generateCircleConfig']             = $this->generateCircleConfig;
        $json['generateJenkinsConfig']            = $this->generateJenkinsConfig;
        $json['generateTravisConfig']             = $this->generateTravisConfig;
        $json['androidUseAppManifest']            = $this->androidUseAppManifest;
        $json['iosUseAppInfoPlist']               = $this->iosUseAppInfoPlist;
        $json['iosGenerateCoreData']              = $this->iosGenerateCoreData;
        $json['runscopeEnabled']                  = $this->runscopeEnabled;
        $json['collapseParamsToArray']            = $this->collapseParamsToArray;
        $json['preserveParameterOrder']           = $this->preserveParameterOrder;
        $json['appendContentHeaders']             = $this->appendContentHeaders;
        $json['modelSerializationIsJSON']         = $this->modelSerializationIsJSON;
        $json['nullify404']                       = $this->nullify404;
        $json['validateRequiredParameters']       = $this->validateRequiredParameters;
        $json['enableAdditionalModelProperties']  = $this->enableAdditionalModelProperties;
        $json['javaUsePropertiesConfig']          = $this->javaUsePropertiesConfig;
        $json['useControllerPrefix']              = $this->useControllerPrefix;
        $json['useExceptionPrefix']               = $this->useExceptionPrefix;
        $json['parameterArrayFormat']             = $this->parameterArrayFormat;
        $json['objCHttpClient']                   = $this->objCHttpClient;
        $json['cSharpHttpClient']                 = $this->cSharpHttpClient;
        $json['androidHttpClient']                = $this->androidHttpClient;
        $json['nodeHttpClient']                   = $this->nodeHttpClient;
        $json['phpHttpClient']                    = $this->phpHttpClient;
        $json['bodySerialization']                = $this->bodySerialization;
        $json['arraySerialization']               = $this->arraySerialization;
        $json['timeout']                          = $this->timeout;
        $json['enableLogging']                    = $this->enableLogging;
        $json['enableHttpCache']                  = $this->enableHttpCache;
        $json['retries']                          = $this->retries;
        $json['retryInterval']                    = $this->retryInterval;
        $json['generateAdvancedDocs']             = $this->generateAdvancedDocs;
        $json['storeTimezoneInformation']         = $this->storeTimezoneInformation;
        $json['enablePhpComposerVersionString']   = $this->enablePhpComposerVersionString;
        $json['securityProtocols']                = $this->securityProtocols;
        $json['underscoreNumbers']                = $this->underscoreNumbers;
        $json['useSingletonPattern']              = $this->useSingletonPattern;
        $json['disableLinting']                   = $this->disableLinting;
        $json['allowSkippingSSLCertVerification'] = $this->allowSkippingSSLCertVerification;
        $json['applyCustomizations']              = $this->applyCustomizations;
        $json['doNotSplitWords']                  = $this->doNotSplitWords;
        $json['sortResources']                    = $this->sortResources;
        $json['enableGlobalUserAgent']            = $this->enableGlobalUserAgent;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
