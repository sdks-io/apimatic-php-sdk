<?php

declare(strict_types=1);

/*
 * ApimaticAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApimaticAPILib\Models;

use stdClass;

/**
 * Parameters are options passed with the endpoint
 */
class Parameter implements \JsonSerializable
{
    /**
     * @var bool
     */
    private $optional;

    /**
     * @var string
     */
    private $type;

    /**
     * @var bool
     */
    private $constant;

    /**
     * @var bool
     */
    private $isArray;

    /**
     * @var bool
     */
    private $isStream;

    /**
     * @var bool
     */
    private $isAttribute;

    /**
     * @var bool
     */
    private $isMap;

    /**
     * @var Attributes
     */
    private $attributes;

    /**
     * @var bool
     */
    private $nullable;

    /**
     * @var string
     */
    private $id;

    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $description;

    /**
     * @var string
     */
    private $defaultValue;

    /**
     * @var string
     */
    private $paramFormat;

    /**
     * @param bool $optional
     * @param string $type
     * @param bool $constant
     * @param bool $isArray
     * @param bool $isStream
     * @param bool $isAttribute
     * @param bool $isMap
     * @param Attributes $attributes
     * @param bool $nullable
     * @param string $id
     * @param string $name
     * @param string $description
     * @param string $defaultValue
     * @param string $paramFormat
     */
    public function __construct(
        bool $optional,
        string $type,
        bool $constant,
        bool $isArray,
        bool $isStream,
        bool $isAttribute,
        bool $isMap,
        Attributes $attributes,
        bool $nullable,
        string $id,
        string $name,
        string $description,
        string $defaultValue,
        string $paramFormat
    ) {
        $this->optional = $optional;
        $this->type = $type;
        $this->constant = $constant;
        $this->isArray = $isArray;
        $this->isStream = $isStream;
        $this->isAttribute = $isAttribute;
        $this->isMap = $isMap;
        $this->attributes = $attributes;
        $this->nullable = $nullable;
        $this->id = $id;
        $this->name = $name;
        $this->description = $description;
        $this->defaultValue = $defaultValue;
        $this->paramFormat = $paramFormat;
    }

    /**
     * Returns Optional.
     * If parameter is optional
     */
    public function getOptional(): bool
    {
        return $this->optional;
    }

    /**
     * Sets Optional.
     * If parameter is optional
     *
     * @required
     * @maps optional
     */
    public function setOptional(bool $optional): void
    {
        $this->optional = $optional;
    }

    /**
     * Returns Type.
     * Type of Parameter
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Type of Parameter
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Constant.
     * IF Parameter is constant
     */
    public function getConstant(): bool
    {
        return $this->constant;
    }

    /**
     * Sets Constant.
     * IF Parameter is constant
     *
     * @required
     * @maps constant
     */
    public function setConstant(bool $constant): void
    {
        $this->constant = $constant;
    }

    /**
     * Returns Is Array.
     * If Param is collected as array
     */
    public function getIsArray(): bool
    {
        return $this->isArray;
    }

    /**
     * Sets Is Array.
     * If Param is collected as array
     *
     * @required
     * @maps isArray
     */
    public function setIsArray(bool $isArray): void
    {
        $this->isArray = $isArray;
    }

    /**
     * Returns Is Stream.
     */
    public function getIsStream(): bool
    {
        return $this->isStream;
    }

    /**
     * Sets Is Stream.
     *
     * @required
     * @maps isStream
     */
    public function setIsStream(bool $isStream): void
    {
        $this->isStream = $isStream;
    }

    /**
     * Returns Is Attribute.
     */
    public function getIsAttribute(): bool
    {
        return $this->isAttribute;
    }

    /**
     * Sets Is Attribute.
     *
     * @required
     * @maps isAttribute
     */
    public function setIsAttribute(bool $isAttribute): void
    {
        $this->isAttribute = $isAttribute;
    }

    /**
     * Returns Is Map.
     */
    public function getIsMap(): bool
    {
        return $this->isMap;
    }

    /**
     * Sets Is Map.
     *
     * @required
     * @maps isMap
     */
    public function setIsMap(bool $isMap): void
    {
        $this->isMap = $isMap;
    }

    /**
     * Returns Attributes.
     * The structure contain attribute details of a parameter type.
     */
    public function getAttributes(): Attributes
    {
        return $this->attributes;
    }

    /**
     * Sets Attributes.
     * The structure contain attribute details of a parameter type.
     *
     * @required
     * @maps attributes
     */
    public function setAttributes(Attributes $attributes): void
    {
        $this->attributes = $attributes;
    }

    /**
     * Returns Nullable.
     * If Parameter is nullable
     */
    public function getNullable(): bool
    {
        return $this->nullable;
    }

    /**
     * Sets Nullable.
     * If Parameter is nullable
     *
     * @required
     * @maps nullable
     */
    public function setNullable(bool $nullable): void
    {
        $this->nullable = $nullable;
    }

    /**
     * Returns Id.
     * Unique Parameter identifier
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique Parameter identifier
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Name.
     * Parameter Name
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Parameter Name
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Description.
     * Parameter Description
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * Parameter Description
     *
     * @required
     * @maps description
     */
    public function setDescription(string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Default Value.
     * Default Values of a Parameter
     */
    public function getDefaultValue(): string
    {
        return $this->defaultValue;
    }

    /**
     * Sets Default Value.
     * Default Values of a Parameter
     *
     * @required
     * @maps defaultValue
     */
    public function setDefaultValue(string $defaultValue): void
    {
        $this->defaultValue = $defaultValue;
    }

    /**
     * Returns Param Format.
     * Specify Parameter Format
     */
    public function getParamFormat(): string
    {
        return $this->paramFormat;
    }

    /**
     * Sets Param Format.
     * Specify Parameter Format
     *
     * @required
     * @maps ParamFormat
     */
    public function setParamFormat(string $paramFormat): void
    {
        $this->paramFormat = $paramFormat;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['optional']     = $this->optional;
        $json['type']         = $this->type;
        $json['constant']     = $this->constant;
        $json['isArray']      = $this->isArray;
        $json['isStream']     = $this->isStream;
        $json['isAttribute']  = $this->isAttribute;
        $json['isMap']        = $this->isMap;
        $json['attributes']   = $this->attributes;
        $json['nullable']     = $this->nullable;
        $json['id']           = $this->id;
        $json['name']         = $this->name;
        $json['description']  = $this->description;
        $json['defaultValue'] = $this->defaultValue;
        $json['ParamFormat']  = $this->paramFormat;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
